Step 1 - Install Kubernetes (1 Control Node and 2 Worker Nodes) - 

-> Enable kernel (overlay & br_netfilter) modules. The modules are enabled whenever the server is up.
cat <<EOF | sudo tee /etc/modules-load.d/containerd.conf
overlay
br_netfilter
EOF
-> To enable them now rather than server restart
	sudo modprobe overlay
	sudo modprobe br_netfilter

-> Set ‘system-level settings’ so the container networking will function as expected
	cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
	
sudo sysctl --system  
(to load the settings immediately)




-> Install containerd packages
	sudo apt-get update && sudo apt-get install -y containerd

-> Create configuration file for containerd 
	sudo mkdir -p /etc/containerd
	sudo containerd config default | sudo tee /etc/containerd/config.toml
	sudo systemctl restart containerd
	sudo systemctl status containerd

	“sudo containerd config default” - generates the default configuration.
	“/etc/containerd/config.toml” - is where the generated default configuration is saved
	
-> Start installing Kubernetes packages
-> Disable swap & remove any entries that enable swap in fstab file if they exist 
sudo swapoff -a
sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

-> Install required packages	
sudo apt-get update && sudo apt-get install -y apt-transport-https curl

-> Add GPG key for Kubernetes repository (download and then add)
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -

-> Set up kubernetes.list file with Kubernetes repository
cat <<EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF
sudo apt-get update

   - 	Install kubernetes packages & Hold so that they won’t be automatically updated
sudo apt-get install -y kubelet=1.23.0-00 kubeadm=1.23.0-00 kubectl=1.23.0-00
sudo apt-mark hold kubelet kubeadm kubectl

Step Two
-> Initialize cluster (only done on Control Plane)
sudo kubeadm init --pod-network-cidr 192.168.0.0/16 --kubernetes-version 1.23.0

Step Three
-> Install the Calico Network Add-On
kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml



Stop Four
-> Join the Worker Nodes to the cluster
-> On Control plane
kubeadm token create --print-join-command

-> Copy the result
-> Paste copied result from Control Plane to each Worker nodes
-> On Control Plane 
Run “kubectl get nodes”

-> Resutl should be
NAME            STATUS                ROLES                   AGE      VERSION
k8s-control     Ready           control-plane,master          10m      v1.23.0
k8s-worker1     Ready                  <none>                 79s      v1.23.0
k8s-worker2     Ready                  <none>                 48s      v1.23.0
